lbind 语法设计


原理：
    - 方便解析
    - 书写方便
    - 便于自动生成

规则：
- 采用命令式的方式
- 命令是行相关，除非特殊情况，否则命令需要在一行之内写完，否则：
    - 行尾采用 \ 续行
    - 该行有未完成的 () [] {} 以及 [[]]
    的情况下，可以认为下一行也是当前命令的一部分。
    
如果命令有需要嵌入的其他代码，采用Lua长字符串的方式书写，即 [[ ... ]]
任何导入到Lua中的名字，都可以通过<lua name>:<C name>的方式指定其在目标代码里面
的名字。

命令语法：
    - 直接出现的单词为关键字
    - 用尖括号 <...> 包起来的部分是对该处出现的内容的说明
    - 用反括号 `...` 包起来的部分是需要原样出现在命令中的字符
    - 用方括号 [ ... ] 包含起来的部分是可选内容
    - 用大括号 { ... } 包含起来的部分是可以重复多次的可选内容
    - 用双方括号 [[ ... ]] 包含起来的部分是引用其他语言的部分，需要采用 Lua 长
      字符串的方式进行书写。

基本命令：
submodule `"` <file-name> `"`
 包含其他的 lbind 文件

include [[ <c code> ]] 
在当前位置嵌入一段目标代码，通常是C/C++代码

lua [ <name> [ `:` <c name> ] ] [[ <lua code> ]]
在当前位置嵌入一段Lua的代码，并包装成C函数的形式
如果没有指定名字，则该代码会在模块加载时即执行。

eval [[ <lua code> ]]
在当前位置直接执行Lua代码，参数为当前的解析器

export name [ `:` <types> ] [`{` <exported items> `}`] [ [[ <c code> ]] ]
在当前位置产生一个导出函数。导出函数是以 LUALIB_API 声明的、以 luaopen_ 开头的
函数。该函数的名字由 name 指定，其中 "." 被替换为 "_"。如果导出函数需要直接导
出一个类型，则通过名字后面可选的冒号指定（只能指定一个）。后面可选的大括号给出
了额外可以被导出的内容。可以被导出的内容包括常量、函数、类型、枚举等等。
另外，可以通过其他的灵活方式进行导出：如果顶层 func 或者 type 前面有 export，
则该函数或者类型会被加入到导出表。注意，无法通过这种方式指定直接被导出的类型。
导出命令后可以跟随可选的C代码，该C代码将完全替换自动产生的导出代码，但是嵌入的
C代码中出现的 {{export}} 字样会被替换为导出代码的内容。其他可选的替代名称为：
  - {{init}} 替代为导出代码中的声明部分
  - {{code}} 替代为导出代码中不包含return的代码部分
  - {{nret}} 替换为return返回的数值
即，原始的导出代码（{{export}}）可以表示为： {{init}} {{code}} return {{nret}};
之后所有会出现嵌入C代码的时候都支持这样的特性。（注意，导出到Lua的C函数的返回
值始终为int）。

[ export ] func name [ `:` <c name> ] [`(` [<arg list>] `)`]
[ `->` `(` <ret list> `)` ] [ [[ <c code> ]] ]
导出函数。该命令可同时用来导出函数，或者为函数做修饰。注意，任何相同导出名的函
数都被认为是重载函数，会最终产生一个导出函数体（当然，实现函数可以有很多个）。
该导出函数体也可以通过下面的override命令指定。
如果给定export关键字，则该函数自动被导出到本文件中出现的第一个export指定的导出
函数中。如果没有这样的导出函数，则自动以本lbind文件的文件名产生一个默认的
export导出函数，而该函数也会通过此函数导出。
之所以不是默认导出，是因为函数默认不导出也是很有用的：你可以将生成的源代码包含
入其他的手写的项目中使用，而不是产生一个独立的Lua C DLL库。
如果不指定<c name>，则<name>被视作该函数所导出的C名称。
函数参数<arg list>和返回值列表<ret list>都是可选的，注意如果返回值只有一个并且
是匿名返回值（不指定在导出代码中的名字），则可以省略返回值列表的圆括号。只要有
返回值，则 `->` 符号不可省略。返回值的数量决定了导出函数返回的值（return的值）
。
如果返回值是特殊的 `self` 类型，则自动返回参数列表的第一个值。
可以嵌入C代码，除了在嵌入的C代码中支持{{export}}, {{init}}, {{code}}和{{nret}}
以外，还支持{{push}}代码，该代码用于将C值推入Lua栈。
没有参数列表、返回值列表和嵌入C代码的func命令还有一个特殊的功能：当其出现在
type、table、export命令的spec部分中时，并不会产生一个导出函数，而是仅仅将
<c name>或者<name>指代的C函数添加到该命令的导出表中。

[ export ] field [in|out] <type> name [ `:` <c name> ] [ [[ <c code> ]] ]
导出域。域可以通过 `.` 语法和 `[]` 语法在 Lua 中访问。使得产生的类型如同 Lua
的原生表一样。in|out指定了该函数的处理类型，如果不指定则会同时处理读写操作。
<type>是该返回值的类型，可选的嵌入C代码规则和func命令相同。

[ export ] const <type> name value
指定常量。该常量会被加入到导出表中去。

[ export ] type name [ `:` <C type name> ] [ `(` <base types> `)` ] [ `{` <type spec> `}` ]
导出类型。其实就是导出一系列的函数。加上一个“类型导出函数”，该类型导出函数的
调用会导致Lua的注册表中多了一个对应类型的元表。需要导出的内容在<type spec>中指
定。可以是任何东西。只是这些东西都会被导出到该类型的元表中。
如果不指定<type spec>，则意味着该类型的导出函数已经在其他地方定义，因此该类型
会被类型系统记住而用于之后的导出代码中，但并不会产生任何导出代码。

[ export ] table name '{' <type spec> '}'
和type命令类似，但是导出函数仅仅是返回一个表，并不将其注册到注册表中。

prefix `"` <prefix> `"`
只能出现在<type spec>中，一旦出现，则指定其中（没有显式指定别名的）C函数
的名字的前缀。比如，如果指定前缀为 "test_"，则其中的func sum会绑定到C中
"test_sum" 函数上。

style `"` snake|camel `"`
同样只能出现在<type spec>中，如果指定了camel或者snake，则函数的命令规则
也会做对应的修改。比如如果指定了 camel，则上面的函数将会对应 testSum 函数。


vim: nu et sw=2 sts=2 fdc=2 fdm=indent
